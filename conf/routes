GET         /                                                controllers.Application.index()
GET         /events/clear                                    controllers.Application.clearEvents()

GET         /nodes                                           controllers.NodesController.index()
POST        /nodes                                           controllers.NodesController.doCreateNode()

GET         /nodes/disconnect                                controllers.ConnectController.disconnect()
GET         /nodes/:id/connect                               controllers.ConnectController.connect(id: Long)

GET         /nodes/sync                                      controllers.NodesController.syncTopology()
GET         /nodes/check                                     controllers.NodesController.jsonCheckNode()

GET         /nodes/json/info                                 controllers.NodesController.jsonSystemInfo()

GET         /nodes/:id                                       controllers.NodesController.node(id: Long)
GET         /nodes/:id/stop                                  controllers.NodesController.stop(id: Long)
GET         /nodes/:id/shutdown                              controllers.NodesController.shutdown(id: Long)

GET         /artifacts                                       controllers.ArtifactsController.index()
GET         /artifacts/repository                            controllers.ArtifactsController.repository()
POST        /artifacts/repository                            controllers.ArtifactsController.doRepositoryCreate()
GET         /artifacts/repository/:id/deploy                 controllers.ArtifactsController.repositoryDeploy(id: Long)
GET         /artifacts/components/:name/:tyype               controllers.ArtifactsController.component(name: String, tyype: String)
POST        /artifacts/deploy                                controllers.ArtifactsController.doDeployAndStartArtifact()
POST        /artifacts/upload                                controllers.ArtifactsController.doUpload()
GET         /artifacts/undeploy/:name/:tyype                 controllers.ArtifactsController.doStopAndUndeployArtifact(name: String, tyype : String)
GET         /artifacts/sls/:name                             controllers.ArtifactsController.sl(name: String)
GET         /artifacts/sas/:name                             controllers.ArtifactsController.sa(name: String)
GET         /artifacts/delete/locals                         controllers.ArtifactsController.deleteLocalArtifacts()

GET         /endpoints                                       controllers.EndpointsController.index()

# Monitoring

GET         /monitoring                                      controllers.MonitoringController.index()
GET         /monitoring/subscribe/:name/:tyype               controllers.MonitoringController.subscribe(name : String, tyype : String)
GET         /monitoring/subscriptions                        controllers.MonitoringController.subscriptions()
GET         /monitoring/subscriptions/:id/unsubscribe        controllers.MonitoringController.unsubscribe(id: Long)
GET         /monitoring/subscriptions/:id/delete             controllers.MonitoringController.delete(id: Long)
GET         /monitoring/clear                                controllers.MonitoringController.clearAll()
GET         /monitoring/readall                              controllers.MonitoringController.markAllAsRead()
GET         /monitoring/json/unread                          controllers.MonitoringController.jsonUnreadAlerts()
GET         /monitoring/json/fake/add                        controllers.MonitoringController.addFakeAlert()
GET         /monitoring/json/fake/subscription/add           controllers.MonitoringController.addFakeSubscription()

GET         /websocket                                       controllers.Websocket.messageSocket()
GET         /websocket/ping                                  controllers.Websocket.ping()

# Send alerts to the client using Web socket channel
#WS      /monitoring/websocket/newAlert              controllers.AlertWebSocket.newAlert()

# Websockets
#WS      /websocket/message                          controllers.WebSocket.newMessage()

# Map static resources from the /app/public folder to the /public path
GET         /assets/*file                                    controllers.Assets.at(path="/public", file)

